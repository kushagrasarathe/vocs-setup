{"documentCount":38,"nextId":38,"documentIds":{"0":"docs/pages/getting-started.mdx#get-started","1":"docs/pages/ch01/constant-product-amm.md#constant-product-amm","2":"docs/pages/ch01/erc20.md#erc20-token","3":"docs/pages/ch01/signature_verification.md#signature-verification","4":"docs/pages/ch01/simple_vault.md#simple-defi-vault","5":"docs/pages/ch01/upgradeable_contract.md#upgradeable-contract","6":"docs/pages/ch00/interacting/calling_other_contracts.md#calling-other-contracts","7":"docs/pages/ch00/interacting/interacting.md#deploy-and-interact-with-contracts","8":"docs/pages/ch00/interacting/interfaces-traits.md#contract-interfaces-and-traits-generation","9":"docs/pages/ch00/interacting/interfaces-traits.md#explicit-interface","10":"docs/pages/ch00/interacting/interfaces-traits.md#implicit-interface","11":"docs/pages/ch00/interacting/interfaces-traits.md#internal-functions","12":"docs/pages/ch00/cairo_cheatsheet/arrays.md#arrays","13":"docs/pages/ch00/cairo_cheatsheet/cairo_cheatsheet.md#cairo-cheatsheet","14":"docs/pages/ch00/cairo_cheatsheet/felt.md#felt252","15":"docs/pages/ch00/cairo_cheatsheet/if_let.md#if-let","16":"docs/pages/ch00/cairo_cheatsheet/if_let.md#see-also","17":"docs/pages/ch00/cairo_cheatsheet/loop.md#loop","18":"docs/pages/ch00/cairo_cheatsheet/loop.md#see-also","19":"docs/pages/ch00/cairo_cheatsheet/mapping.md#mapping","20":"docs/pages/ch00/cairo_cheatsheet/match.md#match","21":"docs/pages/ch00/cairo_cheatsheet/struct.md#struct","22":"docs/pages/ch00/cairo_cheatsheet/tuples.md#tuples","23":"docs/pages/ch00/cairo_cheatsheet/type_casting.md#type-casting","24":"docs/pages/ch00/cairo_cheatsheet/while.md#while","25":"docs/pages/ch00/cairo_cheatsheet/while.md#see-also","26":"docs/pages/ch00/cairo_cheatsheet/while_let.md#while-let","27":"docs/pages/ch00/cairo_cheatsheet/while_let.md#see-also","28":"docs/pages/ch00/basics/documentation.md#documentation","29":"docs/pages/ch00/basics/documentation.md#best-practices","30":"docs/pages/ch00/basics/documentation.md#contract-interface","31":"docs/pages/ch00/basics/documentation.md#implementation-details","32":"docs/pages/ch00/basics/introduction.md#basics-of-smart-contracts-in-cairo","33":"docs/pages/ch00/testing/contract-testing.md#contract-testing","34":"docs/pages/ch00/testing/contract-testing.md#using-the-contract-state","35":"docs/pages/ch00/testing/contract-testing.md#testing-events","36":"docs/pages/ch00/testing/contract-testing.md#starknet-corelib-testing-module","37":"docs/pages/ch00/testing/contract-testing.md#starknet-foundry"},"fieldIds":{"title":0,"titles":1,"text":2},"fieldLength":{"0":[2,1,3],"1":[3,1,23],"2":[2,1,71],"3":[2,1,1],"4":[3,1,44],"5":[2,1,146],"6":[3,1,81],"7":[5,1,14],"8":[5,1,117],"9":[2,5,12],"10":[2,5,30],"11":[2,5,38],"12":[1,1,55],"13":[2,1,15],"14":[1,1,42],"15":[2,1,40],"16":[2,3,3],"17":[1,1,27],"18":[2,2,2],"19":[1,1,23],"20":[1,1,46],"21":[1,1,29],"22":[1,1,47],"23":[2,1,46],"24":[1,1,26],"25":[2,2,2],"26":[2,1,31],"27":[2,3,2],"28":[1,1,28],"29":[3,2,13],"30":[3,2,78],"31":[3,2,27],"32":[6,1,17],"33":[2,1,161],"34":[4,2,63],"35":[2,2,36],"36":[4,2,80],"37":[2,2,63]},"averageFieldLength":[2.289473684210526,1.6578947368421053,41.63157894736842],"storedFields":{"0":{"href":"/getting-started#get-started","html":"</header>\n<p>Hello world!</p>","isPage":true,"text":"\nHello world!","title":"Get started","titles":[]},"1":{"href":"/ch01/constant-product-amm#constant-product-amm","html":"</header>\n<p>This is the Cairo adaptation of the <a href=\"https://solidity-by-example.org/defi/constant-product-amm/\">Solidity by example Constant Product AMM</a>.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{{#include </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">../../</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">listings</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">/</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">applications</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">/</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">constant_product_amm</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">/</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">src</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">/</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">contracts</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">.</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">cairo</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">ConstantProductAmmContract</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}}</span></span></code></pre>","isPage":true,"text":"\nThis is the Cairo adaptation of the Solidity by example Constant Product AMM.\n{{#include ../../listings/applications/constant_product_amm/src/contracts.cairo:ConstantProductAmmContract}}","title":"Constant Product AMM","titles":[]},"2":{"href":"/ch01/erc20#erc20-token","html":"</header>\n<p>Contracts that follow the <a href=\"https://eips.ethereum.org/EIPS/eip-20\">ERC20 Standard</a> are called ERC20 tokens. They are used to represent fungible assets.</p>\n<p>To create an ERC20 conctract, it must implement the following interface:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{{#include </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">../../</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">listings</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">/</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">applications</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">/</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">erc20</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">/</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">src</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">/</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">token</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">.</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">cairo</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">interface}}</span></span></code></pre>\n<p>In Starknet, function names should be written in <em>snake_case</em>. This is not the case in Solidity, where function names are written in <em>camelCase</em>.\nThe Starknet ERC20 interface is therefore slightly different from the Solidity ERC20 interface.</p>\n<p>Here&#x27;s an implementation of the ERC20 interface in Cairo:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{{#include </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">../../</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">listings</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">/</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">applications</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">/</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">erc20</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">/</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">src</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">/</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">token</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">.</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">cairo</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">erc20}}</span></span></code></pre>\n<p>There&#x27;s several other implementations, such as the <a href=\"https://docs.openzeppelin.com/contracts-cairo/0.7.0/erc20\">Open Zeppelin</a> or the <a href=\"https://cairo-by-example.com/examples/erc20/\">Cairo By Example</a> ones.</p>","isPage":true,"text":"\nContracts that follow the ERC20 Standard are called ERC20 tokens. They are used to represent fungible assets.\nTo create an ERC20 conctract, it must implement the following interface:\n{{#include ../../listings/applications/erc20/src/token.cairo:interface}}\nIn Starknet, function names should be written in snake_case. This is not the case in Solidity, where function names are written in camelCase.\nThe Starknet ERC20 interface is therefore slightly different from the Solidity ERC20 interface.\nHere&#x27;s an implementation of the ERC20 interface in Cairo:\n{{#include ../../listings/applications/erc20/src/token.cairo:erc20}}\nThere&#x27;s several other implementations, such as the Open Zeppelin or the Cairo By Example ones.","title":"ERC20 Token","titles":[]},"3":{"href":"/ch01/signature_verification#signature-verification","html":"</header>","isPage":true,"text":"","title":"Signature Verification","titles":[]},"4":{"href":"/ch01/simple_vault#simple-defi-vault","html":"</header>\n<p>This is the Cairo adaptation of the <a href=\"https://solidity-by-example.org/defi/vault/\">Solidity by example Vault</a>.\nHere&#x27;s how it works:</p>\n<ul>\n<li>\n<p>When a user deposits a token, the contract calculates the amount of shares to mint.</p>\n</li>\n<li>\n<p>When a user withdraws, the contract burns their shares, calculates the yield, and withdraw both the yield and the initial amount of token deposited.</p>\n</li>\n</ul>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{{#include </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">../../</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">listings</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">/</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">applications</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">/</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">simple_vault</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">/</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">src</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">/</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">simple_vault</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">.</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">cairo}}</span></span></code></pre>","isPage":true,"text":"\nThis is the Cairo adaptation of the Solidity by example Vault.\nHere&#x27;s how it works:\n\n\nWhen a user deposits a token, the contract calculates the amount of shares to mint.\n\n\nWhen a user withdraws, the contract burns their shares, calculates the yield, and withdraw both the yield and the initial amount of token deposited.\n\n\n{{#include ../../listings/applications/simple_vault/src/simple_vault.cairo}}","title":"Simple Defi Vault","titles":[]},"5":{"href":"/ch01/upgradeable_contract#upgradeable-contract","html":"</header>\n<p>In Starknet, contracts are divided into two parts: contract classes and contract\ninstances. This division follows a similar concept used in object-oriented\nprogramming languages, where we distinguish between the definition and implementation\nof objects.</p>\n<p>A contract class is the definition of a contract: it specifies how the contract\nbehaves. It contains essential information like the Cairo byte code, hint\ninformation, entry point names, and everything that defines its semantics\nunambiguously.</p>\n<p>To identify different contract classes, Starknet assigns a unique identifier to each\nclass: the class hash. A contract instance is a deployed contract that corresponds to\na specific contract class. Think of it as an instance of an object in languages like\nJava.</p>\n<p>Each class is identified by its class hash, which is analogous to a class name in an object-oriented programming language. A contract instance is a deployed contract corresponding to a class.</p>\n<p>You can upgrade a deployed contract to a newer version by calling the <code>replace_class_syscall</code> function. By using this function, you can update the class hash associated with a deployed contract, effectively upgrading its implementation. However, this will not modify the contract&#x27;s storage, so all the data stored in the contract will remain the same.</p>\n<p>To illustrate this concept, let&#x27;s consider an example with two contracts: <code>UpgradeableContract_V0</code>, and <code>UpgradeableContract_V1</code>.\nStart by deploying <code>UpgradeableContract_V0</code> as the initial version. Next, send a transaction that invokes the <code>upgrade</code> function, with the class hash of <code>UpgradeableContract_V1</code> as parameter to upgrade the class hash of the deployed contract to the <code>UpgradeableContract_V1</code> one. Then, call the <code>version</code> method on the contract to see that the contract was upgraded to the V1 version.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{{#include </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">../../</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">listings</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">/</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">applications</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">/</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">upgradeable_contract</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">/</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">src</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">/</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">upgradeable_contract_v0</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">.</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">cairo</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">contract}}</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{{#include </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">../../</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">listings</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">/</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">applications</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">/</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">upgradeable_contract</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">/</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">src</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">/</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">upgradeable_contract_v1</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">.</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">cairo}}</span></span></code></pre>","isPage":true,"text":"\nIn Starknet, contracts are divided into two parts: contract classes and contract\ninstances. This division follows a similar concept used in object-oriented\nprogramming languages, where we distinguish between the definition and implementation\nof objects.\nA contract class is the definition of a contract: it specifies how the contract\nbehaves. It contains essential information like the Cairo byte code, hint\ninformation, entry point names, and everything that defines its semantics\nunambiguously.\nTo identify different contract classes, Starknet assigns a unique identifier to each\nclass: the class hash. A contract instance is a deployed contract that corresponds to\na specific contract class. Think of it as an instance of an object in languages like\nJava.\nEach class is identified by its class hash, which is analogous to a class name in an object-oriented programming language. A contract instance is a deployed contract corresponding to a class.\nYou can upgrade a deployed contract to a newer version by calling the replace_class_syscall function. By using this function, you can update the class hash associated with a deployed contract, effectively upgrading its implementation. However, this will not modify the contract&#x27;s storage, so all the data stored in the contract will remain the same.\nTo illustrate this concept, let&#x27;s consider an example with two contracts: UpgradeableContract_V0, and UpgradeableContract_V1.\nStart by deploying UpgradeableContract_V0 as the initial version. Next, send a transaction that invokes the upgrade function, with the class hash of UpgradeableContract_V1 as parameter to upgrade the class hash of the deployed contract to the UpgradeableContract_V1 one. Then, call the version method on the contract to see that the contract was upgraded to the V1 version.\n{{#include ../../listings/applications/upgradeable_contract/src/upgradeable_contract_v0.cairo:contract}}\n{{#include ../../listings/applications/upgradeable_contract/src/upgradeable_contract_v1.cairo}}","title":"Upgradeable Contract","titles":[]},"6":{"href":"/ch00/interacting/calling_other_contracts#calling-other-contracts","html":"</header>\n<p>There are two different ways to call other contracts in Cairo.</p>\n<p>The easiest way to call other contracts is by using the dispatcher of the contract you want to call.\nYou can read more about Dispatchers in the <a href=\"https://book.cairo-lang.org/ch99-02-02-contract-dispatcher-library-dispatcher-and-system-calls.html#contract-dispatcher\">Cairo Book</a></p>\n<p>The other way is to use the <code>starknet::call_contract_syscall</code> syscall yourself. However, this method is not recommended and will not be covered in this example.</p>\n<p>In order to call other contracts using dispatchers, you will need to define the called contract&#x27;s interface as a trait annotated with the <code>#[starknet::interface]</code> attribute, and then import the <code>IContractDispatcher</code> and <code>IContractDispatcherTrait</code> items in your contract.</p>\n<p>Here&#x27;s the <code>Callee</code> contract interface and implementation:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{{#rustdoc_include </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">../../../</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">listings</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">/</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">getting</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">-</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">started</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">/</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">calling_other_contracts</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">/</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">src</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">/</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">caller</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">.</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">cairo</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">callee_contract}}</span></span></code></pre>\n<p>The following <code>Caller</code> contract use the <code>Callee</code> interface to call the <code>Callee</code> contract:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{{#rustdoc_include </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">../../../</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">listings</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">/</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">getting</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">-</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">started</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">/</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">calling_other_contracts</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">/</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">src</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">/</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">caller</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">.</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">cairo</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">caller_contract}}</span></span></code></pre>","isPage":true,"text":"\nThere are two different ways to call other contracts in Cairo.\nThe easiest way to call other contracts is by using the dispatcher of the contract you want to call.\nYou can read more about Dispatchers in the Cairo Book\nThe other way is to use the starknet::call_contract_syscall syscall yourself. However, this method is not recommended and will not be covered in this example.\nIn order to call other contracts using dispatchers, you will need to define the called contract&#x27;s interface as a trait annotated with the #[starknet::interface] attribute, and then import the IContractDispatcher and IContractDispatcherTrait items in your contract.\nHere&#x27;s the Callee contract interface and implementation:\n{{#rustdoc_include ../../../listings/getting-started/calling_other_contracts/src/caller.cairo:callee_contract}}\nThe following Caller contract use the Callee interface to call the Callee contract:\n{{#rustdoc_include ../../../listings/getting-started/calling_other_contracts/src/caller.cairo:caller_contract}}","title":"Calling other contracts","titles":[]},"7":{"href":"/ch00/interacting/interacting#deploy-and-interact-with-contracts","html":"</header>\n<p>In this chapter, we will see how to deploy and interact with contracts.</p>","isPage":true,"text":"\nIn this chapter, we will see how to deploy and interact with contracts.","title":"Deploy and interact with contracts","titles":[]},"8":{"href":"/ch00/interacting/interfaces-traits#contract-interfaces-and-traits-generation","html":"</header>\n<p>Contract interfaces define the structure and behavior of a contract, serving as the contract&#x27;s public ABI. They list all the function signatures that a contract exposes. For a detailed explanation of interfaces, you can refer to the <a href=\"https://book.cairo-lang.org/ch99-01-02-a-simple-contract.html\">Cairo Book</a>.</p>\n<p>In cairo, to specify the interface you need to define a trait annotated with <code>#[starknet::interface]</code> and then implement that trait in the contract.</p>\n<p>When a function needs to access the contract state, it must have a <code>self</code> parameter of type <code>ContractState</code>. This implies that the corresponding function signature in the interface trait must also take a <code>TContractState</code> type as a parameter. It&#x27;s important to note that every function in the contract interface must have this <code>self</code> parameter of type <code>TContractState</code>.</p>\n<p>You can use the <code>#[generate_trait]</code> attribute to implicitly generate the trait for a specific implementation block. This attribute automatically generates a trait with the same functions as the ones in the implemented block, replacing the <code>self</code> parameter with a generic <code>TContractState</code> parameter. However, you will need to annotate the block with the <code>#[abi(per_item)]</code> attribute, and each function with the appropriate attribute depending on whether it&#x27;s an external function, a constructor or a l1 handler.</p>\n<p>In summary, there&#x27;s two ways to handle interfaces:</p>\n<ul>\n<li>Explicitly, by defining a trait annoted with <code>#[starknet::interface]</code></li>\n<li>Implicitly, by using <code>#[generate_trait]</code> combined with the <code>#[abi(per_item)]</code> attributes, and annotating each function inside the implementation block with the appropriate attribute.</li>\n</ul>\n","isPage":true,"text":"\nContract interfaces define the structure and behavior of a contract, serving as the contract&#x27;s public ABI. They list all the function signatures that a contract exposes. For a detailed explanation of interfaces, you can refer to the Cairo Book.\nIn cairo, to specify the interface you need to define a trait annotated with #[starknet::interface] and then implement that trait in the contract.\nWhen a function needs to access the contract state, it must have a self parameter of type ContractState. This implies that the corresponding function signature in the interface trait must also take a TContractState type as a parameter. It&#x27;s important to note that every function in the contract interface must have this self parameter of type TContractState.\nYou can use the #[generate_trait] attribute to implicitly generate the trait for a specific implementation block. This attribute automatically generates a trait with the same functions as the ones in the implemented block, replacing the self parameter with a generic TContractState parameter. However, you will need to annotate the block with the #[abi(per_item)] attribute, and each function with the appropriate attribute depending on whether it&#x27;s an external function, a constructor or a l1 handler.\nIn summary, there&#x27;s two ways to handle interfaces:\n\nExplicitly, by defining a trait annoted with #[starknet::interface]\nImplicitly, by using #[generate_trait] combined with the #[abi(per_item)] attributes, and annotating each function inside the implementation block with the appropriate attribute.\n\n","title":"Contract interfaces and Traits generation","titles":[]},"9":{"href":"/ch00/interacting/interfaces-traits#explicit-interface","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{{#rustdoc_include </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">../../../</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">listings</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">/</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">getting</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">-</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">started</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">/</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">interfaces_traits</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">/</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">src</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">/</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">explicit</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">.</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">cairo</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">contract}}</span></span></code></pre>\n","isPage":false,"text":"\n{{#rustdoc_include ../../../listings/getting-started/interfaces_traits/src/explicit.cairo:contract}}\n","title":"Explicit interface","titles":["Contract interfaces and Traits generation"]},"10":{"href":"/ch00/interacting/interfaces-traits#implicit-interface","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{{#rustdoc_include </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">../../../</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">listings</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">/</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">getting</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">-</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">started</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">/</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">interfaces_traits</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">/</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">src</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">/</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">implicit</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">.</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">cairo</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">contract}}</span></span></code></pre>\n<blockquote>\n<p>Note: You can import an implicitly generated contract interface with <code>use contract::{GeneratedContractInterface}</code>. However, the <code>Dispatcher</code> will not be generated automatically.</p>\n</blockquote>\n","isPage":false,"text":"\n{{#rustdoc_include ../../../listings/getting-started/interfaces_traits/src/implicit.cairo:contract}}\n\nNote: You can import an implicitly generated contract interface with use contract::{GeneratedContractInterface}. However, the Dispatcher will not be generated automatically.\n\n","title":"Implicit interface","titles":["Contract interfaces and Traits generation"]},"11":{"href":"/ch00/interacting/interfaces-traits#internal-functions","html":"\n<p>You can also use <code>#[generate_trait]</code> for your internal functions.\nSince this trait is generated in the context of the contract, you can define pure functions as well (functions without the <code>self</code> parameter).</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{{#rustdoc_include </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">../../../</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">listings</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">/</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">getting</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">-</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">started</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">/</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">interfaces_traits</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">/</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">src</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">/</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">implicit_internal</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">.</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">cairo</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">contract}}</span></span></code></pre>","isPage":false,"text":"\nYou can also use #[generate_trait] for your internal functions.\nSince this trait is generated in the context of the contract, you can define pure functions as well (functions without the self parameter).\n{{#rustdoc_include ../../../listings/getting-started/interfaces_traits/src/implicit_internal.cairo:contract}}","title":"Internal functions","titles":["Contract interfaces and Traits generation"]},"12":{"href":"/ch00/cairo_cheatsheet/arrays#arrays","html":"</header>\n<p>Arrays are collections of elements of the same type.\nThe possible operations on arrays are defined with the <code>array::ArrayTrait</code> of the corelib:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">trait</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> ArrayTrait</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">T</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt; {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    fn</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> new</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">-&gt;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Array</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">T</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    fn</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> append</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">ref</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> self</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Array</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">T</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;, value</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> T</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    fn</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> pop_front</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">ref</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> self</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Array</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">T</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">-&gt;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Option</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">T</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt; nopanic;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    fn</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> pop_front_consume</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">self</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Array</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">T</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">-&gt;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Option</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;(</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Array</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">T</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;, </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">T</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)&gt; nopanic;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    fn</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> get</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">self</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> @</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Array</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">T</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;, index</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> usize</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">-&gt;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Option</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Box</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">@</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">T</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;&gt;;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    fn</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> at</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">self</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> @</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Array</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">T</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;, index</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> usize</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">-&gt;</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> @</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">T</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    fn</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> len</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">self</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> @</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Array</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">T</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">-&gt;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> usize</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    fn</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> is_empty</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">self</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> @</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Array</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">T</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">-&gt;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> bool</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    fn</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> span</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">self</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> @</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Array</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">T</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">-&gt;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Span</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">T</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<p>For example:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{{#include </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">../../../</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">listings</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">/</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">getting</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">-</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">started</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">/</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">cairo_cheatsheet</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">/</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">src</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">/</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">array_example</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">.</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">cairo}}</span></span></code></pre>","isPage":true,"text":"\nArrays are collections of elements of the same type.\nThe possible operations on arrays are defined with the array::ArrayTrait of the corelib:\ntrait ArrayTrait&lt;T&gt; {\n    fn new() -&gt; Array&lt;T&gt;;\n    fn append(ref self: Array&lt;T&gt;, value: T);\n    fn pop_front(ref self: Array&lt;T&gt;) -&gt; Option&lt;T&gt; nopanic;\n    fn pop_front_consume(self: Array&lt;T&gt;) -&gt; Option&lt;(Array&lt;T&gt;, T)&gt; nopanic;\n    fn get(self: @Array&lt;T&gt;, index: usize) -&gt; Option&lt;Box&lt;@T&gt;&gt;;\n    fn at(self: @Array&lt;T&gt;, index: usize) -&gt; @T;\n    fn len(self: @Array&lt;T&gt;) -&gt; usize;\n    fn is_empty(self: @Array&lt;T&gt;) -&gt; bool;\n    fn span(self: @Array&lt;T&gt;) -&gt; Span&lt;T&gt;;\n}\nFor example:\n{{#include ../../../listings/getting-started/cairo_cheatsheet/src/array_example.cairo}}","title":"Arrays","titles":[]},"13":{"href":"/ch00/cairo_cheatsheet/cairo_cheatsheet#cairo-cheatsheet","html":"</header>\n<p>This chapter aims to provide a quick reference for the most common Cairo constructs.</p>","isPage":true,"text":"\nThis chapter aims to provide a quick reference for the most common Cairo constructs.","title":"Cairo Cheatsheet","titles":[]},"14":{"href":"/ch00/cairo_cheatsheet/felt#felt252","html":"</header>\n<p>Felt252 is a fundamental data type in Cairo from which all other data types are derived.\nFelt252 can also be used to store <a href=\"../basics/bytearrays-strings.md#short-strings\">short string representations</a> with a maximum length of 31 characters.</p>\n<p>For example:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{{#include </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">../../../</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">listings</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">/</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">getting</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">-</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">started</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">/</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">cairo_cheatsheet</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">/</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">src</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">/</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">felt_example</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">.</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">cairo</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">sheet}}</span></span></code></pre>","isPage":true,"text":"\nFelt252 is a fundamental data type in Cairo from which all other data types are derived.\nFelt252 can also be used to store short string representations with a maximum length of 31 characters.\nFor example:\n{{#include ../../../listings/getting-started/cairo_cheatsheet/src/felt_example.cairo:sheet}}","title":"Felt252","titles":[]},"15":{"href":"/ch00/cairo_cheatsheet/if_let#if-let","html":"</header>\n<p>A <code>if let</code> statement is a combination of an <code>if</code> statement and a <code>let</code> statement. It allows you to execute the block only if the pattern matches. It&#x27;s a cleaner way to handle a <code>match</code> statement with only one pattern that you want to handle.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{{#include </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">../../../</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">listings</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">/</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">getting</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">-</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">started</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">/</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">cairo_cheatsheet</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">/</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">src</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">/</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">if_let_example</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">.</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">cairo</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">sheet}}</span></span></code></pre>\n","isPage":true,"text":"\nA if let statement is a combination of an if statement and a let statement. It allows you to execute the block only if the pattern matches. It&#x27;s a cleaner way to handle a match statement with only one pattern that you want to handle.\n{{#include ../../../listings/getting-started/cairo_cheatsheet/src/if_let_example.cairo:sheet}}\n","title":"if let","titles":[]},"16":{"href":"/ch00/cairo_cheatsheet/if_let#see-also","html":"\n<p><a href=\"while_let.md\">while let</a></p>","isPage":false,"text":"\nwhile let","title":"See also","titles":["if let",null]},"17":{"href":"/ch00/cairo_cheatsheet/loop#loop","html":"</header>\n<p>A <code>loop</code> specifies a block of code that will run repetitively until a halting condition is encountered.\nFor example:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{{#include </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">../../../</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">listings</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">/</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">getting</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">-</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">started</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">/</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">cairo_cheatsheet</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">/</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">src</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">/</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">loop_example</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">.</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">cairo</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">sheet}}</span></span></code></pre>\n","isPage":true,"text":"\nA loop specifies a block of code that will run repetitively until a halting condition is encountered.\nFor example:\n{{#include ../../../listings/getting-started/cairo_cheatsheet/src/loop_example.cairo:sheet}}\n","title":"loop","titles":[]},"18":{"href":"/ch00/cairo_cheatsheet/loop#see-also","html":"\n<p><a href=\"while.md\">while</a></p>","isPage":false,"text":"\nwhile","title":"See also","titles":["loop",null]},"19":{"href":"/ch00/cairo_cheatsheet/mapping#mapping","html":"</header>\n<p>The <code>LegacyMap</code> type can be used to represent a collection of key-value.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{{#include </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">../../../</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">listings</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">/</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">getting</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">-</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">started</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">/</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">cairo_cheatsheet</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">/</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">src</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">/</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">mapping_example</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">.</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">cairo}}</span></span></code></pre>","isPage":true,"text":"\nThe LegacyMap type can be used to represent a collection of key-value.\n{{#include ../../../listings/getting-started/cairo_cheatsheet/src/mapping_example.cairo}}","title":"Mapping","titles":[]},"20":{"href":"/ch00/cairo_cheatsheet/match#match","html":"</header>\n<p>The &quot;match&quot; expression in Cairo allows us to control the flow of our code by comparing a felt data type or an enum against various patterns and then running specific code based on the pattern that matches.\nFor example:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{{#include </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">../../../</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">listings</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">/</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">getting</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">-</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">started</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">/</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">cairo_cheatsheet</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">/</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">src</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">/</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">match_example</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">.</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">cairo}}</span></span></code></pre>","isPage":true,"text":"\nThe &quot;match&quot; expression in Cairo allows us to control the flow of our code by comparing a felt data type or an enum against various patterns and then running specific code based on the pattern that matches.\nFor example:\n{{#include ../../../listings/getting-started/cairo_cheatsheet/src/match_example.cairo}}","title":"Match","titles":[]},"21":{"href":"/ch00/cairo_cheatsheet/struct#struct","html":"</header>\n<p>A struct is a data type similar to tuple. Like tuples they can be used to hold data of different types.\nFor example:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{{#include </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">../../../</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">listings</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">/</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">getting</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">-</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">started</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">/</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">cairo_cheatsheet</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">/</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">src</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">/</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">struct_example</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">.</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">cairo}}</span></span></code></pre>","isPage":true,"text":"\nA struct is a data type similar to tuple. Like tuples they can be used to hold data of different types.\nFor example:\n{{#include ../../../listings/getting-started/cairo_cheatsheet/src/struct_example.cairo}}","title":"Struct","titles":[]},"22":{"href":"/ch00/cairo_cheatsheet/tuples#tuples","html":"</header>\n<p>Tuples is a data type to group a fixed number of items of potentially different types into a single compound structure. Unlike arrays, tuples have a set length and can contain elements of varying types. Once a tuple is created, its size cannot change.\nFor example:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{{#include </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">../../../</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">listings</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">/</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">getting</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">-</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">started</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">/</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">cairo_cheatsheet</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">/</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">src</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">/</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">tuple_example</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">.</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">cairo</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">sheet}}</span></span></code></pre>","isPage":true,"text":"\nTuples is a data type to group a fixed number of items of potentially different types into a single compound structure. Unlike arrays, tuples have a set length and can contain elements of varying types. Once a tuple is created, its size cannot change.\nFor example:\n{{#include ../../../listings/getting-started/cairo_cheatsheet/src/tuple_example.cairo:sheet}}","title":"Tuples","titles":[]},"23":{"href":"/ch00/cairo_cheatsheet/type_casting#type-casting","html":"</header>\n<p>Cairo supports the conversion from one scalar types to another by using the into and try_into methods.\n<code>traits::Into</code> is used for conversion from a smaller data type to a larger data type, while <code>traits::TryInto</code> is used when converting from a larger to a smaller type that might not fit.\nFor example:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{{#include </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">../../../</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">listings</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">/</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">getting</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">-</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">started</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">/</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">cairo_cheatsheet</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">/</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">src</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">/</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">type_casting_example</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">.</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">cairo</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">sheet}}</span></span></code></pre>","isPage":true,"text":"\nCairo supports the conversion from one scalar types to another by using the into and try_into methods.\ntraits::Into is used for conversion from a smaller data type to a larger data type, while traits::TryInto is used when converting from a larger to a smaller type that might not fit.\nFor example:\n{{#include ../../../listings/getting-started/cairo_cheatsheet/src/type_casting_example.cairo:sheet}}","title":"Type casting","titles":[]},"24":{"href":"/ch00/cairo_cheatsheet/while#while","html":"</header>\n<p>A <code>while</code> loop allows you to specify a condition that must be true for the loop to continue.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{{#include </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">../../../</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">listings</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">/</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">getting</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">-</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">started</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">/</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">cairo_cheatsheet</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">/</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">src</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">/</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">while_example</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">.</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">cairo</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">sheet}}</span></span></code></pre>\n","isPage":true,"text":"\nA while loop allows you to specify a condition that must be true for the loop to continue.\n{{#include ../../../listings/getting-started/cairo_cheatsheet/src/while_example.cairo:sheet}}\n","title":"while","titles":[]},"25":{"href":"/ch00/cairo_cheatsheet/while#see-also","html":"\n<p><a href=\"loop.md\">loop</a></p>","isPage":false,"text":"\nloop","title":"See also","titles":["while",null]},"26":{"href":"/ch00/cairo_cheatsheet/while_let#while-let","html":"</header>\n<p>A <code>while let</code> loop is a combination of a <code>while</code> loop and a <code>let</code> statement. It allows you to execute the loop body only if the pattern matches.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{{#include </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">../../../</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">listings</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">/</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">getting</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">-</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">started</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">/</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">cairo_cheatsheet</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">/</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">src</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">/</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">while_let_example</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">.</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">cairo</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">sheet}}</span></span></code></pre>\n","isPage":true,"text":"\nA while let loop is a combination of a while loop and a let statement. It allows you to execute the loop body only if the pattern matches.\n{{#include ../../../listings/getting-started/cairo_cheatsheet/src/while_let_example.cairo:sheet}}\n","title":"while let","titles":[]},"27":{"href":"/ch00/cairo_cheatsheet/while_let#see-also","html":"\n<p><a href=\"while.md\">while</a></p>","isPage":false,"text":"\nwhile","title":"See also","titles":["while let",null]},"28":{"href":"/ch00/basics/documentation#documentation","html":"</header>\n<p>It&#x27;s important to take the time to document your code. It will helps developers and users to understand the contract and its functionalities.</p>\n<p>In Cairo, you can add comments with <code>//</code>.</p>\n","isPage":true,"text":"\nIt&#x27;s important to take the time to document your code. It will helps developers and users to understand the contract and its functionalities.\nIn Cairo, you can add comments with //.\n","title":"Documentation","titles":[]},"29":{"href":"/ch00/basics/documentation#best-practices","html":"\n<p>Since Cairo 1, the community has adopted a <a href=\"https://doc.rust-lang.org/rust-by-example/meta/doc.html\">Rust-like documentation style</a>.</p>\n","isPage":false,"text":"\nSince Cairo 1, the community has adopted a Rust-like documentation style.\n","title":"Best Practices:","titles":["Documentation",null]},"30":{"href":"/ch00/basics/documentation#contract-interface","html":"\n<p>In smart contracts, you will often have a trait that defines the contract&#x27;s interface (with <code>#[starknet::interface]</code>).\nThis is the perfect place to include detailed documentation explaining the purpose and functionality of the contract entry points. You can follow this template:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">#[starknet</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">::</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">interface]</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">trait</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> IContract</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">TContractState</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt; {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    /// High-level description of the function</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    ///</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    /// # Arguments</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    ///</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    /// * `arg_1` - Description of the argument</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    /// * `arg_n` - ...</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    ///</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    /// # Returns</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    ///</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    /// High-level description of the return value</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    fn</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> do_something</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">ref</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> self</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> TContractState</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, arg_1</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> T_arg_1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">-&gt;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> T_return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<p>Keep in mind that this should not describe the implementation details of the function, but rather the high-level purpose and functionality of the contract from the perspective of a user.</p>\n","isPage":false,"text":"\nIn smart contracts, you will often have a trait that defines the contract&#x27;s interface (with #[starknet::interface]).\nThis is the perfect place to include detailed documentation explaining the purpose and functionality of the contract entry points. You can follow this template:\n#[starknet::interface]\ntrait IContract&lt;TContractState&gt; {\n    /// High-level description of the function\n    ///\n    /// # Arguments\n    ///\n    /// * `arg_1` - Description of the argument\n    /// * `arg_n` - ...\n    ///\n    /// # Returns\n    ///\n    /// High-level description of the return value\n    fn do_something(ref self: TContractState, arg_1: T_arg_1) -&gt; T_return;\n}\nKeep in mind that this should not describe the implementation details of the function, but rather the high-level purpose and functionality of the contract from the perspective of a user.\n","title":"Contract Interface:","titles":["Documentation",null]},"31":{"href":"/ch00/basics/documentation#implementation-details","html":"\n<p>When writing the logic of the contract, you can add comments to describe the technical implementation details of the functions.</p>\n<blockquote>\n<p>Avoid over-commenting: Comments should provide additional value and clarity.</p>\n</blockquote>","isPage":false,"text":"\nWhen writing the logic of the contract, you can add comments to describe the technical implementation details of the functions.\n\nAvoid over-commenting: Comments should provide additional value and clarity.\n","title":"Implementation Details:","titles":["Documentation",null]},"32":{"href":"/ch00/basics/introduction#basics-of-smart-contracts-in-cairo","html":"</header>\n<p>The following chapters will introduce you to Starknet smart contracts and how to write them in Cairo.</p>","isPage":true,"text":"\nThe following chapters will introduce you to Starknet smart contracts and how to write them in Cairo.","title":"Basics of Smart Contracts in Cairo","titles":[]},"33":{"href":"/ch00/testing/contract-testing#contract-testing","html":"</header>\n<p>Testing plays a crucial role in software development, especially for smart contracts. In this section, we&#x27;ll guide you through the basics of testing a smart contract on Starknet with <code>scarb</code>.</p>\n<p>Let&#x27;s start with a simple smart contract as an example:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{{#include </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">../../../</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">listings</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">/</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">getting</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">-</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">started</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">/</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">testing_how_to</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">/</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">src</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">/</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">contract</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">.</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">cairo</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">contract}}</span></span></code></pre>\n<p>Now, take a look at the tests for this contract:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{{#include </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">../../../</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">listings</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">/</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">getting</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">-</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">started</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">/</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">testing_how_to</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">/</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">src</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">/</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">contract</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">.</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">cairo</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">tests}}</span></span></code></pre>\n<p>To define our test, we use scarb, which allows us to create a separate module guarded with <code>#[cfg(test)]</code>. This ensures that the test module is only compiled when running tests using <code>scarb test</code>.</p>\n<p>Each test is defined as a function with the <code>#[test]</code> attribute. You can also check if a test panics using the <code>#[should_panic]</code> attribute.</p>\n<p>As we are in the context of a smart contract, you can also set up the gas limit for a test by using the <code>#[available_gas(X)]</code>. This is a great way to ensure that some of your contract&#x27;s features stay under a certain gas limit!</p>\n<blockquote>\n<p>Note: The term &quot;gas&quot; here refers to Sierra gas, not L1 gas</p>\n</blockquote>\n<p>Now, let&#x27;s move on to the testing process:</p>\n<ul>\n<li>Use the <code>deploy</code> function logic to declare and deploy your contract.</li>\n<li>Use <code>assert</code> to verify that the contract behaves as expected in the given context.\n<ul>\n<li>You can also use assertions macros: <code>assert_eq</code>, <code>assert_ne</code>, <code>assert_gt</code>, <code>assert_ge</code>, <code>assert_lt</code>, <code>assert_le</code></li>\n</ul>\n</li>\n</ul>\n<p>If you didn&#x27;t noticed yet, every examples in this book have hidden tests, you can see them by clicking on the &quot;Show hidden lines&quot; (eyes icon) on the top right of code blocks.\nYou can also find a detailed explanation of testing in cairo in the <a href=\"https://book.cairo-lang.org/ch10-00-testing-cairo-programs.html\">Cairo book - Chapter 10</a>.</p>\n","isPage":true,"text":"\nTesting plays a crucial role in software development, especially for smart contracts. In this section, we&#x27;ll guide you through the basics of testing a smart contract on Starknet with scarb.\nLet&#x27;s start with a simple smart contract as an example:\n{{#include ../../../listings/getting-started/testing_how_to/src/contract.cairo:contract}}\nNow, take a look at the tests for this contract:\n{{#include ../../../listings/getting-started/testing_how_to/src/contract.cairo:tests}}\nTo define our test, we use scarb, which allows us to create a separate module guarded with #[cfg(test)]. This ensures that the test module is only compiled when running tests using scarb test.\nEach test is defined as a function with the #[test] attribute. You can also check if a test panics using the #[should_panic] attribute.\nAs we are in the context of a smart contract, you can also set up the gas limit for a test by using the #[available_gas(X)]. This is a great way to ensure that some of your contract&#x27;s features stay under a certain gas limit!\n\nNote: The term &quot;gas&quot; here refers to Sierra gas, not L1 gas\n\nNow, let&#x27;s move on to the testing process:\n\nUse the deploy function logic to declare and deploy your contract.\nUse assert to verify that the contract behaves as expected in the given context.\n\nYou can also use assertions macros: assert_eq, assert_ne, assert_gt, assert_ge, assert_lt, assert_le\n\n\n\nIf you didn&#x27;t noticed yet, every examples in this book have hidden tests, you can see them by clicking on the &quot;Show hidden lines&quot; (eyes icon) on the top right of code blocks.\nYou can also find a detailed explanation of testing in cairo in the Cairo book - Chapter 10.\n","title":"Contract Testing","titles":[]},"34":{"href":"/ch00/testing/contract-testing#using-the-contract-state","html":"\n<p>You can use the <code>Contract::contract_state_for_testing</code> function to access the contract state. This function is only available in the test environment and allows you to mutate and read the contract state directly.</p>\n<p>This can be useful for testing internal functions, or specific state mutations that are not exposed to the contract&#x27;s interface. You can either use it with a deployed contract or as a standalone state.</p>\n<p>Here is an example of how to do the same previous test using the contract state:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{{#include </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">../../../</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">listings</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">/</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">getting</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">-</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">started</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">/</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">testing_how_to</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">/</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">src</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">/</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">contract</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">.</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">cairo</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">tests_with_state}}</span></span></code></pre>\n","isPage":false,"text":"\nYou can use the Contract::contract_state_for_testing function to access the contract state. This function is only available in the test environment and allows you to mutate and read the contract state directly.\nThis can be useful for testing internal functions, or specific state mutations that are not exposed to the contract&#x27;s interface. You can either use it with a deployed contract or as a standalone state.\nHere is an example of how to do the same previous test using the contract state:\n{{#include ../../../listings/getting-started/testing_how_to/src/contract.cairo:tests_with_state}}\n","title":"Using the contract state","titles":["Contract Testing"]},"35":{"href":"/ch00/testing/contract-testing#testing-events","html":"\n<p>In order to test events, you need to use the <code>starknet::pop_log</code> function. If the contract did not emit any events, the function will return <code>Option::None</code>.</p>\n<p>See the test for the <a href=\"../basics/events.md\">Events</a> section:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">{{#rustdoc_include </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">../../../</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">listings</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">/</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">getting</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">-</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">started</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">/</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">events</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">/</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">src</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">/</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">counter</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">.</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">cairo</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">test_events}}</span></span></code></pre>\n","isPage":false,"text":"\nIn order to test events, you need to use the starknet::pop_log function. If the contract did not emit any events, the function will return Option::None.\nSee the test for the Events section:\n{{#rustdoc_include ../../../listings/getting-started/events/src/counter.cairo:test_events}}\n","title":"Testing events","titles":["Contract Testing"]},"36":{"href":"/ch00/testing/contract-testing#starknet-corelib-testing-module","html":"\n<p>To make testing more convenient, the <code>testing</code> module of the corelib provides some helpful functions:</p>\n<ul>\n<li><code>set_caller_address(address: ContractAddress)</code></li>\n<li><code>set_contract_address(address: ContractAddress)</code></li>\n<li><code>set_block_number(block_number: u64)</code></li>\n<li><code>set_block_timestamp(block_timestamp: u64)</code></li>\n<li><code>set_account_contract_address(address: ContractAddress)</code></li>\n<li><code>set_sequencer_address(address: ContractAddress)</code></li>\n<li><code>set_version(version: felt252)</code></li>\n<li><code>set_transaction_hash(hash: felt252)</code></li>\n<li><code>set_chain_id(chain_id: felt252)</code></li>\n<li><code>set_nonce(nonce: felt252)</code></li>\n<li><code>set_signature(signature: felt252)</code></li>\n<li><code>set_max_fee(fee: u128)</code></li>\n<li><code>pop_log_raw(address: ContractAddress) -&gt; Option&lt;(Span&lt;felt252&gt;, Span&lt;felt252&gt;)&gt;</code></li>\n<li><code>pop_log&lt;T, +starknet::Event&lt;T&gt;&gt;(address: ContractAddress) -&gt; Option&lt;T&gt;</code></li>\n<li><code>pop_l2_to_l1_message(address: ContractAddress) -&gt; Option&lt;(felt252, Span&lt;felt252&gt;)&gt;</code></li>\n</ul>\n<p>You may also need the <code>info</code> module from the corelib, which allows you to access information about the current execution context (see <a href=\"../basics/syscalls.md\">syscalls</a>):</p>\n<ul>\n<li><code>get_caller_address() -&gt; ContractAddress</code></li>\n<li><code>get_contract_address() -&gt; ContractAddress</code></li>\n<li><code>get_block_info() -&gt; Box&lt;BlockInfo&gt;</code></li>\n<li><code>get_tx_info() -&gt; Box&lt;TxInfo&gt;</code></li>\n<li><code>get_block_timestamp() -&gt; u64</code></li>\n<li><code>get_block_number() -&gt; u64</code></li>\n</ul>\n<p>You can found the full list of functions in the <a href=\"https://github.com/starkware-libs/cairo/tree/main/corelib/src/starknet\">Starknet Corelib repo</a>.</p>\n","isPage":false,"text":"\nTo make testing more convenient, the testing module of the corelib provides some helpful functions:\n\nset_caller_address(address: ContractAddress)\nset_contract_address(address: ContractAddress)\nset_block_number(block_number: u64)\nset_block_timestamp(block_timestamp: u64)\nset_account_contract_address(address: ContractAddress)\nset_sequencer_address(address: ContractAddress)\nset_version(version: felt252)\nset_transaction_hash(hash: felt252)\nset_chain_id(chain_id: felt252)\nset_nonce(nonce: felt252)\nset_signature(signature: felt252)\nset_max_fee(fee: u128)\npop_log_raw(address: ContractAddress) -&gt; Option&lt;(Span&lt;felt252&gt;, Span&lt;felt252&gt;)&gt;\npop_log&lt;T, +starknet::Event&lt;T&gt;&gt;(address: ContractAddress) -&gt; Option&lt;T&gt;\npop_l2_to_l1_message(address: ContractAddress) -&gt; Option&lt;(felt252, Span&lt;felt252&gt;)&gt;\n\nYou may also need the info module from the corelib, which allows you to access information about the current execution context (see syscalls):\n\nget_caller_address() -&gt; ContractAddress\nget_contract_address() -&gt; ContractAddress\nget_block_info() -&gt; Box&lt;BlockInfo&gt;\nget_tx_info() -&gt; Box&lt;TxInfo&gt;\nget_block_timestamp() -&gt; u64\nget_block_number() -&gt; u64\n\nYou can found the full list of functions in the Starknet Corelib repo.\n","title":"Starknet Corelib Testing Module","titles":["Contract Testing"]},"37":{"href":"/ch00/testing/contract-testing#starknet-foundry","html":"\n<p>Starknet Foundry is a powerful toolkit for developing smart contracts on Starknet. It offers support for testing Starknet smart contracts on top of <code>scarb</code> with the <code>Forge</code> tool.</p>\n<p>Testing with <code>snforge</code> is similar to the process we just described but simplified. Moreover, additional features are on the way, including cheatcodes or parallel tests execution. We highly recommend exploring Starknet Foundry and incorporating it into your projects.</p>\n<p>For more detailed information about testing contracts with Starknet Foundry, check out the <a href=\"https://foundry-rs.github.io/starknet-foundry/testing/contracts.html\">Starknet Foundry Book - Testing Contracts</a>.</p>","isPage":false,"text":"\nStarknet Foundry is a powerful toolkit for developing smart contracts on Starknet. It offers support for testing Starknet smart contracts on top of scarb with the Forge tool.\nTesting with snforge is similar to the process we just described but simplified. Moreover, additional features are on the way, including cheatcodes or parallel tests execution. We highly recommend exploring Starknet Foundry and incorporating it into your projects.\nFor more detailed information about testing contracts with Starknet Foundry, check out the Starknet Foundry Book - Testing Contracts.","title":"Starknet Foundry","titles":["Contract Testing"]}},"dirtCount":0,"index":[["just",{"2":{"37":1}}],["java",{"2":{"5":1}}],["+starknet",{"2":{"36":1}}],["x",{"2":{"33":1}}],["x27",{"2":{"2":2,"4":1,"5":2,"6":2,"8":4,"15":1,"28":1,"30":1,"33":5,"34":1}}],["keep",{"2":{"30":1}}],["key",{"2":{"19":1}}],["`arg",{"2":{"30":2}}],["10",{"2":{"33":1}}],["1`",{"2":{"30":1}}],["1",{"2":{"29":1,"30":2}}],["quot",{"2":{"20":2,"33":4}}],["quick",{"2":{"13":1}}],["31",{"2":{"14":1}}],["given",{"2":{"33":1}}],["great",{"2":{"33":1}}],["group",{"2":{"22":1}}],["gas",{"2":{"33":6}}],["guarded",{"2":{"33":1}}],["guide",{"2":{"33":1}}],["gt",{"2":{"12":24,"30":2,"33":1,"36":19}}],["ge",{"2":{"33":1}}],["generic",{"2":{"8":1}}],["generatedcontractinterface",{"2":{"10":1}}],["generated",{"2":{"10":2,"11":1}}],["generates",{"2":{"8":1}}],["generate",{"2":{"8":3,"11":1}}],["generation",{"0":{"8":1},"1":{"9":1,"10":1,"11":1}}],["getting",{"2":{"6":2,"9":1,"10":1,"11":1,"12":1,"14":1,"15":1,"17":1,"19":1,"20":1,"21":1,"22":1,"23":1,"24":1,"26":1,"33":2,"34":1,"35":1}}],["get",{"0":{"0":1},"2":{"12":1,"36":6}}],["raw",{"2":{"36":1}}],["rather",{"2":{"30":1}}],["right",{"2":{"33":1}}],["role",{"2":{"33":1}}],["rust",{"2":{"29":1}}],["rustdoc",{"2":{"6":2,"9":1,"10":1,"11":1,"35":1}}],["running",{"2":{"20":1,"33":1}}],["run",{"2":{"17":1}}],["recommend",{"2":{"37":1}}],["recommended",{"2":{"6":1}}],["return",{"2":{"30":2,"35":1}}],["returns",{"2":{"30":1}}],["ref",{"2":{"12":2,"30":1}}],["refers",{"2":{"33":1}}],["reference",{"2":{"13":1}}],["refer",{"2":{"8":1}}],["read",{"2":{"6":1,"34":1}}],["remain",{"2":{"5":1}}],["repo",{"2":{"36":1}}],["repetitively",{"2":{"17":1}}],["replacing",{"2":{"8":1}}],["replace",{"2":{"5":1}}],["representations",{"2":{"14":1}}],["represent",{"2":{"2":1,"19":1}}],["yet",{"2":{"33":1}}],["your",{"2":{"6":1,"11":1,"28":1,"33":2,"37":1}}],["yourself",{"2":{"6":1}}],["you",{"2":{"5":2,"6":3,"8":4,"10":1,"11":2,"15":2,"24":1,"26":1,"28":1,"30":2,"31":1,"32":1,"33":7,"34":3,"35":1,"36":3}}],["yield",{"2":{"4":2}}],["l2",{"2":{"36":1}}],["ll",{"2":{"33":1}}],["log",{"2":{"35":1,"36":2}}],["logic",{"2":{"31":1,"33":1}}],["look",{"2":{"33":1}}],["loop",{"0":{"17":1},"1":{"18":1},"2":{"17":2,"24":2,"25":1,"26":3}}],["larger",{"2":{"23":2}}],["language",{"2":{"5":1}}],["languages",{"2":{"5":2}}],["le",{"2":{"33":1}}],["level",{"2":{"30":3}}],["legacymap",{"2":{"19":1}}],["length",{"2":{"14":1,"22":1}}],["len",{"2":{"12":1}}],["let",{"0":{"15":1,"26":1},"1":{"16":1,"27":1},"2":{"5":1,"15":3,"16":1,"26":3,"33":2}}],["lt",{"2":{"12":16,"30":1,"33":1,"36":10}}],["l1",{"2":{"8":1,"33":1,"36":1}}],["lines",{"2":{"33":1}}],["limit",{"2":{"33":2}}],["list",{"2":{"8":1,"36":1}}],["listings",{"2":{"1":1,"2":2,"4":1,"5":2,"6":2,"9":1,"10":1,"11":1,"12":1,"14":1,"15":1,"17":1,"19":1,"20":1,"21":1,"22":1,"23":1,"24":1,"26":1,"33":2,"34":1,"35":1}}],["like",{"2":{"5":2,"21":1,"29":1}}],["plays",{"2":{"33":1}}],["place",{"2":{"30":1}}],["previous",{"2":{"34":1}}],["practices",{"0":{"29":1}}],["projects",{"2":{"37":1}}],["process",{"2":{"33":1,"37":1}}],["provides",{"2":{"36":1}}],["provide",{"2":{"13":1,"31":1}}],["programming",{"2":{"5":2}}],["product",{"0":{"1":1},"2":{"1":2}}],["panic",{"2":{"33":1}}],["panics",{"2":{"33":1}}],["patterns",{"2":{"20":1}}],["pattern",{"2":{"15":2,"20":1,"26":1}}],["parallel",{"2":{"37":1}}],["parameter",{"2":{"5":1,"8":5,"11":1}}],["parts",{"2":{"5":1}}],["powerful",{"2":{"37":1}}],["potentially",{"2":{"22":1}}],["pop",{"2":{"12":2,"35":1,"36":3}}],["possible",{"2":{"12":1}}],["points",{"2":{"30":1}}],["point",{"2":{"5":1}}],["purpose",{"2":{"30":2}}],["pure",{"2":{"11":1}}],["public",{"2":{"8":1}}],["perspective",{"2":{"30":1}}],["perfect",{"2":{"30":1}}],["per",{"2":{"8":2}}],["u128",{"2":{"36":1}}],["u64",{"2":{"36":4}}],["up",{"2":{"33":1}}],["upgrading",{"2":{"5":1}}],["upgraded",{"2":{"5":1}}],["upgrade",{"2":{"5":3}}],["upgradeablecontract",{"2":{"5":5}}],["upgradeable",{"0":{"5":1},"2":{"5":4}}],["update",{"2":{"5":1}}],["us",{"2":{"20":1,"33":1}}],["usize",{"2":{"12":3}}],["using",{"0":{"34":1},"2":{"5":1,"6":2,"8":1,"23":1,"33":3,"34":1}}],["useful",{"2":{"34":1}}],["use",{"2":{"6":2,"8":1,"10":1,"11":1,"33":4,"34":2,"35":1}}],["users",{"2":{"28":1}}],["user",{"2":{"4":2,"30":1}}],["used",{"2":{"2":1,"5":1,"14":1,"19":1,"21":1,"23":2}}],["under",{"2":{"33":1}}],["understand",{"2":{"28":1}}],["unlike",{"2":{"22":1}}],["until",{"2":{"17":1}}],["unique",{"2":{"5":1}}],["unambiguously",{"2":{"5":1}}],["message",{"2":{"36":1}}],["methods",{"2":{"23":1}}],["method",{"2":{"5":1,"6":1}}],["mutations",{"2":{"34":1}}],["mutate",{"2":{"34":1}}],["must",{"2":{"2":1,"8":3,"24":1}}],["mind",{"2":{"30":1}}],["mint",{"2":{"4":1}}],["might",{"2":{"23":1}}],["may",{"2":{"36":1}}],["max",{"2":{"36":1}}],["maximum",{"2":{"14":1}}],["make",{"2":{"36":1}}],["macros",{"2":{"33":1}}],["mapping",{"0":{"19":1},"2":{"19":1}}],["match",{"0":{"20":1},"2":{"15":1,"20":2}}],["matches",{"2":{"15":1,"20":1,"26":1}}],["move",{"2":{"33":1}}],["module",{"0":{"36":1},"2":{"33":2,"36":2}}],["modify",{"2":{"5":1}}],["most",{"2":{"13":1}}],["moreover",{"2":{"37":1}}],["more",{"2":{"6":1,"36":1,"37":1}}],["hidden",{"2":{"33":2}}],["highly",{"2":{"37":1}}],["high",{"2":{"30":3}}],["hint",{"2":{"5":1}}],["hold",{"2":{"21":1}}],["however",{"2":{"5":1,"6":1,"8":1,"10":1}}],["how",{"2":{"4":1,"5":1,"7":1,"32":1,"33":2,"34":2}}],["has",{"2":{"29":1}}],["hash",{"2":{"5":5,"36":2}}],["halting",{"2":{"17":1}}],["handle",{"2":{"8":1,"15":2}}],["handler",{"2":{"8":1}}],["have",{"2":{"8":2,"22":1,"30":1,"33":1}}],["helpful",{"2":{"36":1}}],["helps",{"2":{"28":1}}],["hello",{"2":{"0":1}}],["here",{"2":{"2":1,"4":1,"6":1,"33":1,"34":1}}],["varying",{"2":{"22":1}}],["various",{"2":{"20":1}}],["value",{"2":{"12":1,"19":1,"30":1,"31":1}}],["vault",{"0":{"4":1},"2":{"4":3}}],["v1",{"2":{"5":5}}],["v0",{"2":{"5":3}}],["verify",{"2":{"33":1}}],["verification",{"0":{"3":1}}],["version",{"2":{"5":4,"36":2}}],["do",{"2":{"30":1,"34":1}}],["document",{"2":{"28":1}}],["documentation",{"0":{"28":1},"1":{"29":1,"30":1,"31":1},"2":{"29":1,"30":1}}],["data",{"2":{"5":1,"14":2,"20":1,"21":2,"22":1,"23":2}}],["did",{"2":{"35":1}}],["didn",{"2":{"33":1}}],["directly",{"2":{"34":1}}],["dispatchers",{"2":{"6":2}}],["dispatcher",{"2":{"6":1,"10":1}}],["distinguish",{"2":{"5":1}}],["division",{"2":{"5":1}}],["divided",{"2":{"5":1}}],["different",{"2":{"2":1,"5":1,"6":1,"21":1,"22":1}}],["declare",{"2":{"33":1}}],["developing",{"2":{"37":1}}],["development",{"2":{"33":1}}],["developers",{"2":{"28":1}}],["details",{"0":{"31":1},"2":{"30":1,"31":1}}],["detailed",{"2":{"8":1,"30":1,"33":1,"37":1}}],["described",{"2":{"37":1}}],["describe",{"2":{"30":1,"31":1}}],["description",{"2":{"30":3}}],["derived",{"2":{"14":1}}],["depending",{"2":{"8":1}}],["deploy",{"0":{"7":1},"2":{"7":1,"33":2}}],["deploying",{"2":{"5":1}}],["deployed",{"2":{"5":5,"34":1}}],["deposited",{"2":{"4":1}}],["deposits",{"2":{"4":1}}],["defining",{"2":{"8":1}}],["definition",{"2":{"5":2}}],["defined",{"2":{"12":1,"33":1}}],["define",{"2":{"6":1,"8":2,"11":1,"33":1}}],["defines",{"2":{"5":1,"30":1}}],["defi",{"0":{"4":1}}],["zeppelin",{"2":{"2":1}}],["out",{"2":{"37":1}}],["our",{"2":{"20":1,"33":1}}],["over",{"2":{"31":1}}],["option",{"2":{"12":3,"35":1,"36":3}}],["operations",{"2":{"12":1}}],["open",{"2":{"2":1}}],["once",{"2":{"22":1}}],["only",{"2":{"15":2,"26":1,"33":1,"34":1}}],["on",{"2":{"5":1,"8":1,"12":1,"20":1,"33":4,"37":3}}],["one",{"2":{"5":1,"15":1,"23":1}}],["ones",{"2":{"2":1,"8":1}}],["objects",{"2":{"5":1}}],["object",{"2":{"5":3}}],["order",{"2":{"6":1,"35":1}}],["oriented",{"2":{"5":2}}],["or",{"2":{"2":1,"8":1,"20":1,"34":2,"37":1}}],["other",{"0":{"6":1},"2":{"2":1,"6":6,"14":1}}],["offers",{"2":{"37":1}}],["often",{"2":{"30":1}}],["of",{"0":{"32":1},"2":{"1":1,"2":1,"4":3,"5":6,"6":1,"8":4,"11":1,"12":3,"14":1,"15":1,"17":1,"19":1,"20":1,"21":1,"22":3,"26":1,"30":7,"31":2,"33":5,"34":1,"36":2,"37":1}}],["n`",{"2":{"30":1}}],["number",{"2":{"22":1,"36":3}}],["nonce",{"2":{"36":2}}],["none",{"2":{"35":1}}],["now",{"2":{"33":2}}],["nopanic",{"2":{"12":2}}],["noticed",{"2":{"33":1}}],["note",{"2":{"8":1,"10":1,"33":1}}],["not",{"2":{"2":1,"5":1,"6":2,"10":1,"23":1,"30":1,"33":1,"34":1,"35":1}}],["ne",{"2":{"33":1}}],["new",{"2":{"12":1}}],["newer",{"2":{"5":1}}],["needs",{"2":{"8":1}}],["need",{"2":{"6":1,"8":2,"35":1,"36":1}}],["next",{"2":{"5":1}}],["name",{"2":{"5":1}}],["names",{"2":{"2":2,"5":1}}],["write",{"2":{"32":1}}],["writing",{"2":{"31":1}}],["written",{"2":{"2":2}}],["want",{"2":{"6":1,"15":1}}],["way",{"2":{"6":2,"15":1,"33":1,"37":1}}],["ways",{"2":{"6":1,"8":1}}],["was",{"2":{"5":1}}],["will",{"2":{"5":2,"6":2,"7":1,"8":1,"10":1,"17":1,"28":1,"30":1,"32":1,"35":1}}],["without",{"2":{"11":1}}],["with",{"0":{"7":1},"2":{"5":3,"6":1,"7":1,"8":8,"10":1,"12":1,"14":1,"15":1,"28":1,"30":1,"33":4,"34":2,"37":3}}],["withdraw",{"2":{"4":1}}],["withdraws",{"2":{"4":1}}],["while",{"0":{"24":1,"26":1},"1":{"25":1,"27":1},"2":{"16":1,"18":1,"23":1,"24":2,"26":3,"27":1}}],["which",{"2":{"5":1,"14":1,"33":1,"36":1}}],["whether",{"2":{"8":1}}],["when",{"2":{"4":2,"8":1,"23":1,"31":1,"33":1}}],["where",{"2":{"2":1,"5":1}}],["well",{"2":{"11":1}}],["we",{"2":{"5":1,"7":1,"33":3,"37":2}}],["works",{"2":{"4":1}}],["world",{"2":{"0":1}}],["basics",{"0":{"32":1},"2":{"33":1}}],["based",{"2":{"20":1}}],["but",{"2":{"30":1,"37":1}}],["burns",{"2":{"4":1}}],["blockinfo",{"2":{"36":1}}],["blocks",{"2":{"33":1}}],["block",{"2":{"8":4,"15":1,"17":1,"36":7}}],["body",{"2":{"26":1}}],["bool",{"2":{"12":1}}],["book",{"2":{"6":1,"8":1,"33":2,"37":1}}],["box",{"2":{"12":1,"36":2}}],["both",{"2":{"4":1}}],["best",{"0":{"29":1}}],["behavior",{"2":{"8":1}}],["behaves",{"2":{"5":1,"33":1}}],["between",{"2":{"5":1}}],["be",{"2":{"2":1,"6":1,"10":1,"14":1,"19":1,"21":1,"24":1,"34":1}}],["byte",{"2":{"5":1}}],["by",{"2":{"1":1,"2":1,"4":1,"5":4,"6":1,"8":2,"20":1,"23":1,"33":2}}],["full",{"2":{"36":1}}],["fundamental",{"2":{"14":1}}],["functionality",{"2":{"30":2}}],["functionalities",{"2":{"28":1}}],["functions",{"0":{"11":1},"2":{"8":1,"11":3,"31":1,"34":1,"36":2}}],["function",{"2":{"2":2,"5":3,"8":7,"30":2,"33":2,"34":2,"35":2}}],["fungible",{"2":{"2":1}}],["fee",{"2":{"36":2}}],["features",{"2":{"33":1,"37":1}}],["felt",{"2":{"14":1,"20":1}}],["felt252",{"0":{"14":1},"2":{"14":2,"36":9}}],["find",{"2":{"33":1}}],["fit",{"2":{"23":1}}],["fixed",{"2":{"22":1}}],["flow",{"2":{"20":1}}],["front",{"2":{"12":2}}],["from",{"2":{"2":1,"14":1,"23":3,"30":1,"36":1}}],["fn",{"2":{"12":9,"30":1}}],["foundry",{"0":{"37":1},"2":{"37":4}}],["found",{"2":{"36":1}}],["forge",{"2":{"37":1}}],["for",{"2":{"8":2,"11":1,"12":1,"13":1,"14":1,"17":1,"20":1,"21":1,"22":1,"23":2,"24":1,"33":3,"34":2,"35":1,"37":3}}],["follows",{"2":{"5":1}}],["following",{"2":{"2":1,"6":1,"32":1}}],["follow",{"2":{"2":1,"30":1}}],["txinfo",{"2":{"36":1}}],["tx",{"2":{"36":1}}],["term",{"2":{"33":1}}],["test",{"2":{"33":8,"34":2,"35":3}}],["tests",{"2":{"33":4,"34":1,"37":1}}],["testing",{"0":{"33":1,"35":1,"36":1},"1":{"34":1,"35":1,"36":1,"37":1},"2":{"33":6,"34":3,"36":2,"37":4}}],["technical",{"2":{"31":1}}],["template",{"2":{"30":1}}],["timestamp",{"2":{"36":3}}],["time",{"2":{"28":1}}],["true",{"2":{"24":1}}],["tryinto",{"2":{"23":1}}],["try",{"2":{"23":1}}],["traits",{"0":{"8":1},"1":{"9":1,"10":1,"11":1},"2":{"9":1,"10":1,"11":1,"23":2}}],["trait",{"2":{"6":1,"8":8,"11":2,"12":1,"30":2}}],["transaction",{"2":{"5":1,"36":1}}],["tuples",{"0":{"22":1},"2":{"21":1,"22":2}}],["tuple",{"2":{"21":1,"22":2}}],["t",{"2":{"12":17,"30":2,"33":1,"36":3}}],["tcontractstate",{"2":{"8":3,"30":2}}],["take",{"2":{"8":1,"28":1,"33":1}}],["types",{"2":{"14":1,"21":1,"22":2,"23":1}}],["type",{"0":{"23":1},"2":{"8":3,"12":1,"14":1,"19":1,"20":1,"21":1,"22":1,"23":4}}],["two",{"2":{"5":2,"6":1,"8":1}}],["tool",{"2":{"37":1}}],["toolkit",{"2":{"37":1}}],["top",{"2":{"33":1,"37":1}}],["to",{"2":{"2":2,"4":1,"5":11,"6":7,"7":1,"8":8,"13":1,"14":1,"15":3,"19":1,"20":1,"21":2,"22":1,"23":3,"24":2,"26":1,"28":3,"30":1,"31":1,"32":2,"33":9,"34":5,"35":2,"36":3,"37":1}}],["tokens",{"2":{"2":1}}],["token",{"0":{"2":1},"2":{"2":2,"4":2}}],["through",{"2":{"33":1}}],["think",{"2":{"5":1}}],["this",{"2":{"1":1,"2":1,"4":1,"5":4,"6":2,"7":1,"8":3,"11":1,"13":1,"30":3,"33":5,"34":2}}],["that",{"2":{"2":1,"5":4,"8":4,"15":1,"17":1,"20":1,"23":1,"24":1,"30":2,"33":3,"34":1}}],["them",{"2":{"32":1,"33":1}}],["then",{"2":{"5":1,"6":1,"8":1,"20":1}}],["their",{"2":{"4":1}}],["there",{"2":{"2":1,"6":1,"8":1}}],["therefore",{"2":{"2":1}}],["they",{"2":{"2":1,"8":1,"21":1}}],["the",{"0":{"34":1},"2":{"1":2,"2":8,"4":8,"5":21,"6":13,"8":22,"10":1,"11":3,"12":4,"13":1,"15":2,"19":1,"20":3,"23":2,"24":1,"26":2,"28":2,"29":1,"30":12,"31":4,"32":1,"33":16,"34":7,"35":5,"36":7,"37":4}}],["emit",{"2":{"35":1}}],["empty",{"2":{"12":1}}],["event",{"2":{"36":1}}],["events",{"0":{"35":1},"2":{"35":5}}],["every",{"2":{"8":1,"33":1}}],["everything",{"2":{"5":1}}],["either",{"2":{"34":1}}],["eyes",{"2":{"33":1}}],["eq",{"2":{"33":1}}],["especially",{"2":{"33":1}}],["essential",{"2":{"5":1}}],["environment",{"2":{"34":1}}],["ensure",{"2":{"33":1}}],["ensures",{"2":{"33":1}}],["enum",{"2":{"20":1}}],["encountered",{"2":{"17":1}}],["entry",{"2":{"5":1,"30":1}}],["elements",{"2":{"12":1,"22":1}}],["execution",{"2":{"36":1,"37":1}}],["execute",{"2":{"15":1,"26":1}}],["external",{"2":{"8":1}}],["exposed",{"2":{"34":1}}],["exposes",{"2":{"8":1}}],["expected",{"2":{"33":1}}],["expression",{"2":{"20":1}}],["exploring",{"2":{"37":1}}],["explaining",{"2":{"30":1}}],["explanation",{"2":{"8":1,"33":1}}],["explicit",{"0":{"9":1},"2":{"9":1}}],["explicitly",{"2":{"8":1}}],["examples",{"2":{"33":1}}],["example",{"2":{"1":1,"2":1,"4":1,"5":1,"6":1,"12":2,"14":2,"15":1,"17":2,"19":1,"20":2,"21":2,"22":2,"23":2,"24":1,"26":1,"33":1,"34":1}}],["easiest",{"2":{"6":1}}],["each",{"2":{"5":2,"8":2,"33":1}}],["effectively",{"2":{"5":1}}],["erc20",{"0":{"2":1},"2":{"2":9}}],["id",{"2":{"36":2}}],["identified",{"2":{"5":1}}],["identifier",{"2":{"5":1}}],["identify",{"2":{"5":1}}],["icon",{"2":{"33":1}}],["icontract",{"2":{"30":1}}],["icontractdispatchertrait",{"2":{"6":1}}],["icontractdispatcher",{"2":{"6":1}}],["if",{"0":{"15":1},"1":{"16":1},"2":{"15":4,"26":1,"33":2,"35":1}}],["implicit",{"0":{"10":1},"2":{"10":1,"11":1}}],["implicitly",{"2":{"8":2,"10":1}}],["implies",{"2":{"8":1}}],["implemented",{"2":{"8":1}}],["implementations",{"2":{"2":1}}],["implementation",{"0":{"31":1},"2":{"2":1,"5":2,"6":1,"8":2,"30":1,"31":1}}],["implement",{"2":{"2":1,"8":1}}],["important",{"2":{"8":1,"28":1}}],["import",{"2":{"6":1,"10":1}}],["illustrate",{"2":{"5":1}}],["incorporating",{"2":{"37":1}}],["including",{"2":{"37":1}}],["include",{"2":{"1":1,"2":2,"4":1,"5":2,"6":2,"9":1,"10":1,"11":1,"12":1,"14":1,"15":1,"17":1,"19":1,"20":1,"21":1,"22":1,"23":1,"24":1,"26":1,"30":1,"33":2,"34":1,"35":1}}],["info",{"2":{"36":3}}],["information",{"2":{"5":2,"36":1,"37":1}}],["index",{"2":{"12":2}}],["inside",{"2":{"8":1}}],["instance",{"2":{"5":3}}],["instances",{"2":{"5":1}}],["invokes",{"2":{"5":1}}],["introduce",{"2":{"32":1}}],["internal",{"0":{"11":1},"2":{"11":2,"34":1}}],["interact",{"0":{"7":1},"2":{"7":1}}],["interfaces",{"0":{"8":1},"1":{"9":1,"10":1,"11":1},"2":{"8":3,"9":1,"10":1,"11":1}}],["interface",{"0":{"9":1,"10":1,"30":1},"2":{"2":5,"6":4,"8":5,"10":1,"30":3,"34":1}}],["into",{"2":{"5":1,"22":1,"23":3,"37":1}}],["initial",{"2":{"4":1,"5":1}}],["in",{"0":{"32":1},"2":{"2":5,"5":5,"6":5,"7":1,"8":6,"11":1,"14":1,"20":1,"28":1,"30":2,"32":1,"33":7,"34":1,"35":1,"36":1}}],["item",{"2":{"8":2}}],["items",{"2":{"6":1,"22":1}}],["its",{"2":{"5":3,"22":1,"28":1}}],["it",{"2":{"2":1,"4":1,"5":3,"8":3,"15":2,"26":1,"28":2,"34":1,"37":2}}],["is",{"2":{"1":1,"2":2,"4":1,"5":5,"6":3,"11":1,"12":1,"14":1,"15":1,"17":1,"21":1,"22":2,"23":2,"26":1,"30":1,"33":3,"34":2,"37":2}}],["snforge",{"2":{"37":1}}],["snake",{"2":{"2":1}}],["scarb",{"2":{"33":3,"37":1}}],["scalar",{"2":{"23":1}}],["smart",{"0":{"32":1},"2":{"30":1,"32":1,"33":4,"37":2}}],["smaller",{"2":{"23":2}}],["span",{"2":{"12":2,"36":3}}],["specify",{"2":{"8":1,"24":1}}],["specific",{"2":{"5":1,"8":1,"20":1,"34":1}}],["specifies",{"2":{"5":1,"17":1}}],["support",{"2":{"37":1}}],["supports",{"2":{"23":1}}],["summary",{"2":{"8":1}}],["such",{"2":{"2":1}}],["same",{"2":{"5":1,"8":1,"12":1,"34":1}}],["some",{"2":{"33":1,"36":1}}],["something",{"2":{"30":1}}],["software",{"2":{"33":1}}],["so",{"2":{"5":1}}],["solidity",{"2":{"1":1,"2":2,"4":1}}],["style",{"2":{"29":1}}],["struct",{"0":{"21":1},"2":{"21":2}}],["structure",{"2":{"8":1,"22":1}}],["string",{"2":{"14":1}}],["store",{"2":{"14":1}}],["stored",{"2":{"5":1}}],["storage",{"2":{"5":1}}],["standalone",{"2":{"34":1}}],["standard",{"2":{"2":1}}],["stay",{"2":{"33":1}}],["statement",{"2":{"15":4,"26":1}}],["state",{"0":{"34":1},"2":{"8":1,"34":7}}],["start",{"2":{"5":1,"33":1}}],["started",{"0":{"0":1},"2":{"6":2,"9":1,"10":1,"11":1,"12":1,"14":1,"15":1,"17":1,"19":1,"20":1,"21":1,"22":1,"23":1,"24":1,"26":1,"33":2,"34":1,"35":1}}],["starknet",{"0":{"36":1,"37":1},"2":{"2":2,"5":2,"6":2,"8":2,"30":2,"32":1,"33":1,"35":1,"36":1,"37":6}}],["syscalls",{"2":{"36":1}}],["syscall",{"2":{"5":1,"6":2}}],["sequencer",{"2":{"36":1}}],["separate",{"2":{"33":1}}],["section",{"2":{"33":1,"35":1}}],["set",{"2":{"22":1,"33":1,"36":12}}],["self",{"2":{"8":3,"11":1,"12":8,"30":1}}],["serving",{"2":{"8":1}}],["see",{"0":{"16":1,"18":1,"25":1,"27":1},"2":{"5":1,"7":1,"33":1,"35":1,"36":1}}],["send",{"2":{"5":1}}],["semantics",{"2":{"5":1}}],["several",{"2":{"2":1}}],["sheet",{"2":{"14":1,"15":1,"17":1,"22":1,"23":1,"24":1,"26":1}}],["show",{"2":{"33":1}}],["short",{"2":{"14":1}}],["should",{"2":{"2":1,"30":1,"31":1,"33":1}}],["shares",{"2":{"4":2}}],["sierra",{"2":{"33":1}}],["size",{"2":{"22":1}}],["single",{"2":{"22":1}}],["since",{"2":{"11":1,"29":1}}],["simplified",{"2":{"37":1}}],["simple",{"0":{"4":1},"2":{"4":2,"33":1}}],["similar",{"2":{"5":1,"21":1,"37":1}}],["signatures",{"2":{"8":1}}],["signature",{"0":{"3":1},"2":{"8":1,"36":2}}],["s",{"2":{"2":2,"4":1,"5":2,"6":2,"8":4,"15":1,"28":1,"30":1,"33":3,"34":1}}],["slightly",{"2":{"2":1}}],["src",{"2":{"1":1,"2":2,"4":1,"5":2,"6":2,"9":1,"10":1,"11":1,"12":1,"14":1,"15":1,"17":1,"19":1,"20":1,"21":1,"22":1,"23":1,"24":1,"26":1,"33":2,"34":1,"35":1}}],["account",{"2":{"36":1}}],["access",{"2":{"8":1,"34":1,"36":1}}],["available",{"2":{"33":1,"34":1}}],["avoid",{"2":{"31":1}}],["adopted",{"2":{"29":1}}],["address",{"2":{"36":13}}],["additional",{"2":{"31":1,"37":1}}],["add",{"2":{"28":1,"31":1}}],["adaptation",{"2":{"1":1,"4":1}}],["against",{"2":{"20":1}}],["aims",{"2":{"13":1}}],["at",{"2":{"12":1,"33":1}}],["attributes",{"2":{"8":1}}],["attribute",{"2":{"6":1,"8":5,"33":2}}],["arg",{"2":{"30":2}}],["argument",{"2":{"30":1}}],["arguments",{"2":{"30":1}}],["arraytrait",{"2":{"12":2}}],["array",{"2":{"12":12}}],["arrays",{"0":{"12":1},"2":{"12":2,"22":1}}],["are",{"2":{"2":3,"5":1,"6":1,"12":2,"14":1,"33":1,"34":1,"37":1}}],["append",{"2":{"12":1}}],["appropriate",{"2":{"8":2}}],["applications",{"2":{"1":1,"2":2,"4":1,"5":2}}],["automatically",{"2":{"8":1,"10":1}}],["also",{"0":{"16":1,"18":1,"25":1,"27":1},"2":{"8":1,"11":1,"14":1,"33":4,"36":1}}],["allows",{"2":{"15":1,"20":1,"24":1,"26":1,"33":1,"34":1,"36":1}}],["all",{"2":{"5":1,"8":1,"14":1}}],["abi",{"2":{"8":3}}],["about",{"2":{"6":1,"36":1,"37":1}}],["amount",{"2":{"4":2}}],["amm",{"0":{"1":1},"2":{"1":2}}],["a",{"2":{"4":3,"5":15,"6":1,"8":14,"13":1,"14":2,"15":5,"17":3,"19":1,"20":1,"21":2,"22":5,"23":4,"24":2,"26":4,"29":1,"30":2,"33":12,"34":2,"37":1}}],["assertions",{"2":{"33":1}}],["assert",{"2":{"33":7}}],["assets",{"2":{"2":1}}],["associated",{"2":{"5":1}}],["assigns",{"2":{"5":1}}],["as",{"2":{"2":1,"5":3,"6":1,"8":3,"11":1,"33":4,"34":1}}],["any",{"2":{"35":1}}],["another",{"2":{"23":1}}],["annotating",{"2":{"8":1}}],["annotate",{"2":{"8":1}}],["annotated",{"2":{"6":1,"8":1}}],["annoted",{"2":{"8":1}}],["analogous",{"2":{"5":1}}],["and",{"0":{"7":1,"8":1},"1":{"9":1,"10":1,"11":1},"2":{"4":2,"5":4,"6":4,"7":1,"8":4,"15":1,"20":1,"22":1,"23":1,"26":1,"28":2,"30":2,"31":1,"32":1,"33":1,"34":2,"37":1}}],["an",{"2":{"2":2,"5":4,"8":1,"10":1,"15":1,"20":1,"33":1,"34":1}}],["current",{"2":{"36":1}}],["certain",{"2":{"33":1}}],["cfg",{"2":{"33":1}}],["crucial",{"2":{"33":1}}],["created",{"2":{"22":1}}],["create",{"2":{"2":1,"33":1}}],["clicking",{"2":{"33":1}}],["clarity",{"2":{"31":1}}],["class",{"2":{"5":12}}],["classes",{"2":{"5":2}}],["cleaner",{"2":{"15":1}}],["cheatcodes",{"2":{"37":1}}],["cheatsheet",{"0":{"13":1},"2":{"12":1,"14":1,"15":1,"17":1,"19":1,"20":1,"21":1,"22":1,"23":1,"24":1,"26":1}}],["check",{"2":{"33":1,"37":1}}],["chain",{"2":{"36":2}}],["change",{"2":{"22":1}}],["characters",{"2":{"14":1}}],["chapters",{"2":{"32":1}}],["chapter",{"2":{"7":1,"13":1,"33":1}}],["counter",{"2":{"35":1}}],["collection",{"2":{"19":1}}],["collections",{"2":{"12":1}}],["commenting",{"2":{"31":1}}],["comments",{"2":{"28":1,"31":2}}],["community",{"2":{"29":1}}],["common",{"2":{"13":1}}],["compiled",{"2":{"33":1}}],["compound",{"2":{"22":1}}],["comparing",{"2":{"20":1}}],["combination",{"2":{"15":1,"26":1}}],["combined",{"2":{"8":1}}],["corelib",{"0":{"36":1},"2":{"12":1,"36":3}}],["corresponding",{"2":{"5":1,"8":1}}],["corresponds",{"2":{"5":1}}],["covered",{"2":{"6":1}}],["code",{"2":{"5":1,"17":1,"20":2,"28":1,"33":1}}],["convenient",{"2":{"36":1}}],["converting",{"2":{"23":1}}],["conversion",{"2":{"23":2}}],["condition",{"2":{"17":1,"24":1}}],["consume",{"2":{"12":1}}],["constructs",{"2":{"13":1}}],["constructor",{"2":{"8":1}}],["constantproductammcontract",{"2":{"1":1}}],["constant",{"0":{"1":1},"2":{"1":2}}],["consider",{"2":{"5":1}}],["continue",{"2":{"24":1}}],["contain",{"2":{"22":1}}],["contains",{"2":{"5":1}}],["control",{"2":{"20":1}}],["contractaddress",{"2":{"36":9}}],["contract",{"0":{"5":1,"8":1,"30":1,"33":1,"34":1},"1":{"9":1,"10":1,"11":1,"34":1,"35":1,"36":1,"37":1},"2":{"4":2,"5":23,"6":9,"8":7,"9":1,"10":3,"11":2,"28":1,"30":3,"31":1,"33":10,"34":8,"35":1,"36":3}}],["contractstate",{"2":{"8":1}}],["contracts",{"0":{"6":1,"7":1,"32":1},"2":{"1":1,"2":1,"5":2,"6":5,"7":1,"30":1,"32":1,"33":1,"37":4}}],["context",{"2":{"11":1,"33":2,"36":1}}],["concept",{"2":{"5":2}}],["conctract",{"2":{"2":1}}],["casting",{"0":{"23":1},"2":{"23":1}}],["case",{"2":{"2":2}}],["cannot",{"2":{"22":1}}],["can",{"2":{"5":2,"6":1,"8":2,"10":1,"11":2,"14":1,"19":1,"21":1,"22":1,"28":1,"30":1,"31":1,"33":5,"34":3,"36":1}}],["caller",{"2":{"6":4,"36":2}}],["callee",{"2":{"6":4}}],["called",{"2":{"2":1,"6":1}}],["call",{"2":{"5":1,"6":6}}],["calling",{"0":{"6":1},"2":{"5":1,"6":2}}],["calculates",{"2":{"4":2}}],["camelcase",{"2":{"2":1}}],["cairo",{"0":{"13":1,"32":1},"2":{"1":2,"2":4,"4":2,"5":3,"6":4,"8":2,"9":1,"10":1,"11":1,"12":2,"13":1,"14":3,"15":2,"17":2,"19":2,"20":3,"21":2,"22":2,"23":3,"24":2,"26":2,"28":1,"29":1,"32":1,"33":4,"34":1,"35":1}}]],"serializationVersion":2}
